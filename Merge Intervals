Aprroach:
1. Sort the array.
2. Answer list empty add first element in the list
3. Check whether next element is getting in between the previous number which is store in array then replace the maxend of both the element.
4. If interval is not getting merged add as it is as a new element.

class Solution {
    public int[][] merge(int[][] arr) {

        //More complex loop and tracking i
    //    Arrays.sort(arr, (a, b) -> a[0] - b[0]);

    // List<int[]> resultList = new ArrayList<>();

    // for (int i = 0; i < arr.length; i++) {
    //     int start = arr[i][0];
    //     int end = arr[i][1];

    //     while (i + 1 < arr.length && arr[i + 1][0] <= end) {
    //         end = Math.max(end, arr[i + 1][1]);
    //         i++;
    //     }

    //     resultList.add(new int[]{start, end});
    // }

    // // Convert List<int[]> to int[][]
    // return resultList.toArray(new int[resultList.size()][]);

    //can do simply in single loop
        int n = arr.length;
        if (n <= 1) return arr;

        Arrays.sort(arr, (a, b) -> a[0] - b[0]);

        List<int[]> ans = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (ans.isEmpty() || arr[i][0] > ans.get(ans.size() - 1)[1]) {
                ans.add(new int[] { arr[i][0], arr[i][1] });
            } else {
                ans.get(ans.size() - 1)[1] = Math.max(ans.get(ans.size() - 1)[1], arr[i][1]);
            }
        }

        return ans.toArray(new int[ans.size()][]);
        
    }
}
